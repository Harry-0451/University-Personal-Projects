<html><head>
<meta http-equiv="Content-Language" content="en-gb">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Networks Coursework - Introduction</title>
</head>

<body>

<title>COMP6330 Computer Networks 2022: Programming Assignments: Sender and Receiver</title>
<h1 align="center">COMP6330 Computer Networks 2022: Programming Assignments Sender and Receiver<br>
Version: 2022.02.24
</h1>
<table style="border-collapse: collapse; border-style: solid; border-width: 1px" cellspacing="1" cellpadding="7">
	<tbody><tr>
		<td><strong>Quick links in this document</strong></td>
		<td>&nbsp;</td>
		<td><strong>Appendices and other external links</strong></td>
	</tr>
	<tr>
		<td valign="top">
		<ul>
			<li><a href="#Overview">Overview</a></li>
			<li><a href="#What_do">What you need to do</a></li>
			<li><a href="#How_marked">How your work will be marked</a></li>
			<li><a href="#Marking_criteria">Marking criteria</a></li>
			<li><a href="#Deadlines">Deadlines and submission</a></li>
			<li><a href="#Help">Help and advice</a></li>
			<li><a href="#Plagiarism">Plagiarism</a></li>
		</ul>
		</td>
		<td valign="top">
		&nbsp;</td>
		<td valign="top">
		<ul>
			<li><a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/people/staff/djb/co633/LOCAL-ONLY/frames.html">Frame format specification</a></li>
			<li><a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/people/staff/djb/co633/LOCAL-ONLY/frames.html#Examples">Examples of correctly formatted frames</a></li>
			<li><a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/people/staff/djb/co633/LOCAL-ONLY/advice.html">Advice on tackling the implementation</a></li>
			<li>
			<a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/students/plagiarism-faq.html">
			Plagiarism and collaboration FAQ</a></li>
		</ul>
		</td>
	</tr>
</tbody></table>
<h2><a name="Overview"></a>Requirements overview and Language independence</h2>
<p>The two assignments described here involve implementing
complementary parts of a simple data link protocol.
On completion you will have gained a
concrete understanding of several important design issues including 
framing, error detection, message segmentation and reassembly. 
The coursework also serves to consolidate 
problem-solving and software development skills.</p>

<p>You must implement two standalone programs <b>in a language of your choice</b>
that implement the protocol defined here. The Sender program must 
receive a single message on its standard input
(System.in equivalent in Java) and write the encoded frames (one per 
line) on its standard output (System.out in Java).
The Receiver program must received encoded frames (one per line) for a 
single message on its standard input and output the reconstituted
message on its standard output. Any error messages from both programs 
must be reported on standard error
(System.err in Java).
Nothing must be printed to standard output other than the encoded frames
 (Sender) or the reconstituted
message (Receiver).</p>

Each execution of Sender or Receiver deals with a single message. To 
send or receive multiple messages, the programs must be run multiple
times.

<p>On startup, either program will receive a command-line argument pair in the following form:
<code>--mtu 20</code> to specify the MTU of frames. The value of 20 may be larger or smaller on any
particular invocation, within the constraints of the <a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/people/staff/djb/co633/LOCAL-ONLY/frames.html">framing specification</a>.</p>

<p>Regardless of the language you choose, or how your programs would naturally
be executed, you must include with your submission one Unix <em>bash script</em> called <code>sender</code>
and one Unix <em>bash script</em> called <code>receiver</code> that separately run your programs.
Both scripts would take any command-line arguments to be passed to the program. For instance:
</p><pre>sender --mtu 20
receiver --mtu 20
</pre>
<p>Simple example scripts, written for running the Java example code, can be found in <a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/people/staff/djb/co633/LOCAL-ONLY/files.zip">files.zip</a>.
</p><p>The marking process will assume that you have provided these 
scripts and you will receive a mark of zero if your programs cannot be 
run in exactly this way.

</p><p>The following <a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/people/staff/djb/co633/LOCAL-ONLY/demo.mp4">video</a> demonstrates the basic operation
of both Sender and Receiver.

</p><p>While you are free to choose the implementation language, a specific requirement
is that the language must be available on raptor and it must be possible for the marker both to compile (where required
by the language) and execute your code without having to install a particular IDE or any other software, such as
libraries or build tools. If the language you wish to use is not currently available on raptor, 
please contact <a href="mailto:cs-syshelp@kent.ac.uk">cs-syshelp@kent.ac.uk</a> to find out whether
it can be installed for this assessment. We reserve the right to decline a request for a particular language
where its installation would require a disproportionate amount of effort to do so.</p>
<p>If you prefer to implement your solutions in Java,
    you can download a <a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/people/staff/djb/co633/LOCAL-ONLY/files.zip">ZIP archive</a> containing 
simple starting-point source files for the sender and receiver.
It would be worth consulting these sources anyway to be sure that you have understood the i/o and MTU requirements
described above.

</p><p>If the language you choose requires compilation of your code (e.g., Java, C++, etc.) then
you must provide a bash script called <code>compile</code> that takes no command-line arguments
and compiles your code in a path-independent way. In other words, the names of any source files
in the <code>compile</code> script must be <em>relative</em> to where the script is in the
archive of the files you submit. There must be no pathname elements that relate to your
particular filesystem. An example <code>compile</code> script for Java has been provided to
help you understand what is required.

</p><p>It is <b>essential</b> that your submission will allow the marker to (compile and) run your programs as easily as
demonstrated in <a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/people/staff/djb/co633/LOCAL-ONLY/demo.mp4">the video demo</a> via the bash scripts you submit.

</p><h2><a name="What_do"></a>What you need to do</h2>
<p>The programming coursework is divided into two parts.
Sender involves completing 
an implementation of the data link protocol to send messages in the form of encoded frames,
and Receiver is to complete an implementation
that rebuilds the original messages from the encoded frames.
Although both are 
based on the same protocol, the classes are designed so the sender and receiver 
can be developed and tested independently.</p>
<p>To score a high mark you will need to:</p>
<ul>
	<li>Study the frame format specification and marking criteria (see below) 
carefully to understand the requirements and how they'll be assessed. If you 
	have difficulty interpreting the formal language of the specification, it 
	may help to look at the examples provided at the end of the
	<a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/people/staff/djb/co633/LOCAL-ONLY/frames.html#Examples">frame format spec</a>.<br><br></li>
	<li>Design and code solutions for sending and receiving that 
	function correctly in all cases, including the proper detection and handling 
	of errors. All the information about the protocol necessary for this purpose 
	is provided in the specification and accompanying documentation. However, 
	developing a working solution will involve reasoning and problem-solving 
	skills plus a good understanding of network concepts. 
        If your programming skills are rusty, 
	the
		<a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/people/staff/djb/co633/LOCAL-ONLY/advice.html">advice on tackling the implementation</a> appendix 
	may help you get started.<br><br></li>
	<li>Test your implementations thoroughly. This is an important part of the 
	exercise. To help you get started, sample test data and examples of valid operation can 
be found in the frame format spec. Check your 
solutions give the same results. Note the examples provided are <strong>not</strong> 
comprehensive tests. 
Additional checks may be needed to verify a full solution rigorously. 
This is especially true for the receiver due to its greater complexity (decoding 
is inherently harder than encoding) and potential data corruption during 
transmission (which could affect any characters).</li>
</ul>
<h2><a name="How_marked"></a>How your work will be marked</h2>
<p>Marks will be based entirely on functionality. We will <strong>not</strong> 
evaluate your coding. Therefore, it is essential that your submission can be compiled (if
the implementation language requires that) and executed.
If it cannot be executed, it will be impossible to assess its functionality and you
will automatically receive a mark of zero.</p>
<p>Your implementations of the Sender and Receiver
will be marked independently of each other with the help of a partly automatic test harness,
so it will be possible to obtain full marks for one of the programs even if the other
is incomplete.
The marking test harness will invoke the Sender/Receiver  with a variety of 
messages/frames, varying the MTU 
and simulating borderline and error 
conditions. Marks will be awarded according to how well 
your code performs in these tests. An 
implementation that functions correctly for all tests will score 100%. We will 
not be releasing the test data used for marking because, as explained earlier, working out how to 
verify your implementation thoroughly is part of the exercise.</p>
<h3><strong>Beware of critical bugs!</strong></h3>
<p>An implementation that yields incorrect results for 
most tests will score a low mark, regardless of how many lines of code the submission contains! It's 
therefore better to submit a partial solution handling a 
subset of test cases correctly (e.g. just short 
messages) than a more comprehensive solution containing a critical bug causing it to fail every time.</p>
<p>Here are  
common causes of critical bugs:</p>
<ul>
	<li>
	<p>Making an improvement/bug-fix in a hurry near the 
	deadline without thorough retesting. Sometimes a tiny tweak to the code can 
	lead to a catastrophic fault.</p>
	</li>
	<li>
	<p>Trying to implement too many features at the same time. The resulting code is likely to 
	contain multiple bugs which can combine in strange ways that are hard to 
	isolate.&nbsp; It's better to build the implementation incrementally, testing 
	each new part as it's added.</p>
	</li>
	<li>
	<p>Not reading the frame format spec carefully and/or not checking 
	your output matches the examples provided. If they don't match exactly there 
	may be a serious 
	problem.</p>
	</li>
	<li>
	<p>Confusing the end of the input stream with the end of a 
	single message, for example the receiver keeps reading frames until the 
	end of the input stream is reached rather than stopping when the last frame 
	of the current message has been received. Compare your output with examples 
	provided that involve several messages.</p>
	</li>
</ul>
<h2><a name="Marking_criteria"></a>Marking criteria</h2>
<p>The marks for each assignment are divided into several categories, each 
corresponding to a group of related tests. The categories and approximate 
breakdown of marks are listed below. More marks are allocated for the receiver 
because it's more difficult to implement.</p>
<table style="border-collapse: collapse; border: 1px solid #000000" cellspacing="2" cellpadding="2">
	<tbody><tr>
		<td style="border: 1px solid #000000; "><strong>Assignment</strong></td>
		<td style="border: 1px solid #000000; "><strong>Test category</strong></td>
		<td style="border: 1px solid #000000; text-align: center; "><strong>Approx marks</strong></td>
	</tr>
	<tr>
		<td style="border: 1px solid #000000; " rowspan="4">Sender</td>
		<td style="border: 1px solid #000000; height: 24px;">Short message encoding (single 
		frame only)</td>
		<td style="border: 1px solid #000000; text-align: center; height: 24px;">15</td>
	</tr>
	<tr>
		<td style="border: 1px solid #000000; ">Longer message encoding (segmentation and 
		MTU compliance)</td>
		<td style="border: 1px solid #000000; text-align: center; ">15</td>
	</tr>
	<tr>
		<td style="border: 1px solid #000000; ">Robustness (errors and borderline 
		conditions)</td>
		<td style="border: 1px solid #000000; text-align: center; ">10</td>
	</tr>
	<tr>
		<td style="border: 1px solid #000000; "><em>Subtotal for sender assignment</em></td>
		<td style="border: 1px solid #000000; text-align: center; "><em>40</em></td>
	</tr>
	<tr>
		<td style="border: 1px solid #000000; " rowspan="4">Receiver</td>
		<td style="border: 1px solid #000000; ">Short message decoding (single 
		frame only)</td>
		<td style="border: 1px solid #000000; text-align: center; ">15</td>
	</tr>
	<tr>
		<td style="border: 1px solid #000000; ">Longer message decoding (segmentation and 
		MTU compliance)</td>
		<td style="border: 1px solid #000000; text-align: center; ">15</td>
	</tr>
	<tr>
		<td style="border: 1px solid #000000; ">Robustness (errors and borderline 
		conditions)</td>
		<td style="border: 1px solid #000000; text-align: center; ">30</td>
	</tr>
	<tr>
		<td style="border: 1px solid #000000; "><em>Subtotal for receiver 
		assignment</em></td>
		<td style="border: 1px solid #000000; text-align: center; "><em>60</em></td>
	</tr>
	</tbody></table>
<p>The tests check the completeness, correctness, robustness and 
efficiency of your implementation:</p>
<ul>
	<li>
	<p>Completeness relates to 
the proportion of protocol features implemented.<br>It's possible to achieve a pass 
mark without implementing the full protocol.</p></li>
	<li>
	<p>Correctness means how accurately 
those features that are implemented comply with the specification.<br>It's better 
to omit a feature entirely than to implement it incorrectly in a way that makes 
the whole system fail.</p>
	</li>
	<li>
	<p>Robustness refers to the detection and handling of 
errors and borderline cases*.<br>This criterion represents a large part of the 
	marks for the receiver because there are many potential cases to consider.</p>
	</li>
	<li>
	<p>Efficiency 
in this context is concerned solely with how efficiently the protocol is used 
and not how fast it executes.<br>For example, does sendMessage make the best 
	possible use of the MTU?</p>
	</li>
</ul>
<p>* The specification doesn't list every possible borderline and error 
condition because working these out is part of the exercise. For the Sender, the 
issue boils down to whether it can transmit the given message without 
breaking the rules of the protocol as defined in the frame format spec. If it 
can, there's no error. If not, there is. For the Receiver, the issue is whether 
all of the frames received fully comply with all rules. If so, 
there's no error. If not, there is.</p>
<h2><a name="Deadlines"></a>Deadlines and submission</h2>
<p>The deadline for the Sender is 23:55 Fri 18th March 2022.
The deadline for the Receiver is 23:55 Tue 29th March 2022.
</p><p>Your work must be submitted via Moodle.
There are separate upload areas for the Sender and the Receiver.
You must submit a single ZIP file in each case.
Each submission must be independent of the other. I.e., nothing in the
Receiver submission must depend on the availability of the Sender submission
and vice versa.
Do not include any Receiver code in your submission for the Sender assignment
or any Sender code in your submissions for the Receiver assignment.
Each ZIP file must contain full source for your solution and
everything the marker needs to be able to
compile (where required by the language) and execute your program.
In particular, do not forget to include the <code>compile</code> <em>bash script</em> (if required),
<code>sender</code> <em>bash script</em> (for the Sender) and <code>receiver</code> <em>bash script</em> (for the Receiver).
</p><p><b>NB</b>: Do not put code in either the sender or receiver scripts to compile your program. Compilation must be
done separately from execution. Failure to observe this requirement is likely to result in your programs failing the
tests through execution timeouts.

</p><p>Please note that the marker might be completely unfamiliar with the language
you have chosen to use and/or how to run your program.
You <em>must</em> provide full instructions for how to do this, otherwise you will
receive a mark of zero as it will not be possible to test your submission
no matter how complete it is.

</p><h2><a name="Help"></a>Help and advice</h2>
<p>See the appendices for further <a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/people/staff/djb/co633/LOCAL-ONLY/advice.html">advice</a>, 
including suggestions for how each assignment can be broken down into smaller 
steps.
If you get stuck or something needs clarification
you may ask questions this <a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/people/staff/djb/comp6330/LOCAL-ONLY/anon.html">anonymous
question asking page</a>. The index page for answers is <a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/people/staff/djb/comp6330/anonqa/index.html">here</a>.
Altenatively, you can contact <a href="mailto:d.j.barnes@kent.ac.uk">David Barnes via
email</a>.

</p><h2><a name="Plagiarism"></a>Plagiarism</h2>
<p>You are reminded of the University's rules on 
<a href="https://www-cs-kent-ac-uk.chain.kent.ac.uk/students/plagiarism-faq.html">plagiarism and 
duplication of material</a>. <strong>The rules for these assignments are 
stricter then those you may have encountered previously.</strong> Designing, implementing 
and testing the solution are all part of the exercise. This includes working out 
what kinds of error could arise. Hence please do <strong>
not</strong> collaborate with anyone else on the design, implementation or 
testing.</p>
<p>Your work will be checked for originality using a plagiarism 
detection tool. We also reserve the right to use submitted code to test and 
refine our plagiarism detection methods during the course and in the 
future.</p>

<hr>
<p>Document history: Original version by Peter Kenny. Current version by David Barnes.
</p><ul>
<li><p>2022.02.25: Released for assessment in 2022.
</p></li></ul>

<p><em>(C) 2022 University of Kent. No part of the specification 
including linked content that relates to the assignment may be copied or 
distributed without prior written permission from the author.</em></p>




</body></html>